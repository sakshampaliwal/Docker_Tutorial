Docker Networking:

-For Docker containers to communicate with each other and the outside world via the host machine, there has to be a layer of networking involved. 
 Docker supports different types of networks, each fit for certain use cases. 

-Virtual machines are more flexible in some ways as they can support configurations like NAT and host networking. 
 Docker typically uses a bridge network, and while it can support host networking, that option is only available on Linux.
 To simplify, think of virtual machines as complete, independent computers running inside your computer. They can have different networking setups like NAT and directly connecting to the host's network. 
 on the other hand, By default Docker uses a bridge network, which isolates containers from each other and from the host while allowing them to communicate.

-When using Docker containers, network isolation is achieved using a network namespace, not an entirely separate networking stack.

-You can run hundreds of containers on a single-node Docker host, so it’s required that the host can support networking at this scale. 

-Docker handles communication between containers by creating a default bridge network, so you often don’t have to deal with networking and can instead focus on creating and running containers. This default bridge network works in most cases, but it’s not the only option you have.
 Docker allows you to create three different types of network drivers out-of-the-box.
 Types of Docker networks such as: Bridge Network, Host Network, None Network, MACVLAN and IPVLAN Networks, Overlay Networking

- When Docker is installed, a default bridge network named  docker0 is created. Each new Docker container is automatically attached to this network, unless a custom network is specified.
  Besides  docker0  , two other networks get created automatically by Docker:  host  (no isolation between host and containers on this network, to the outside world they are on the same network) and  none  (attached containers run on container-specific network stack).

Bridge Network:

- It is a default network created automatically when you deploy a container. Bridge network uses a software bridge that allows containers connected to the same bridge network to communicate.
  The bridge network creates a private internal isolated network to the host so containers on this network can communicate.

- You can use this whenever you want your containers running in isolation to connect and communicate with each other. 
  Since containers run in isolation, the bridge network solves the port conflict problem. Containers running in the same bridge network can communicate with each other, and Docker uses iptables on the host machine to prevent access outside of the bridge.

- A bridge can only connect containers running on the same host, which is a very common scenario for development environments.
  but in many cases, having everything on the same bridge can cause conflicts and other anomalies. Therefore, it can be useful to know how to create user-defined bridged networks.
  To create a user-defined network, use the following command, which will create a bridged network named abc:
  -> docker network create abc
  launch a container specifying the exact network that we want to use:
  -> docker run --name mynginx --network abc -d nginx
  to inspect this network:
  -> docker inspect abc

Overlay Network:

- Overlay networking is used if container on host A wants to talk to host B then to make communication between them we use Overlay networking. Overlay networking uses VXLAN to create an Overlay network. 
  An overlay will allow traffic to flow between containers on different Docker hosts without needing to do any configuration like routing at the host level once the overlay network is running.

- You will see overlay networks often in enterprise and cloud deployments, where container orchestration solutions like Kubernetes or Docker Swarm are in play.
  By default, the Overlay network is encrypted with the AES algorithm.

-  create an overlay network called def which allows standalone containers to connect to it:
   -> docker network create -d overlay --attachable def  //--attachable bcoz by default, overlay networks are not directly attachable, but using this option makes them so.

- Run command to run container on that network:
  -> docker run --name mynginx --network def -d nginx

Host Network:

- Sometimes we do not require isolation from the host, we can simply spin up container on the host network and use host network directly.

- Here we use network of host rather than using any isolated network that is why it is called host networking. This is why port mapping is not required in this networking
  and if we require to access the any port of container then we can directly access on host ports.
  So when we inspect this network then we can see there is no ipv4 address assigned to it.
  
  Description given on Docker site: Given that the container does not have its own IP-address when using host mode networking, 
  port-mapping does not take effect, and the -p, --publish, -P, and --publish-all option are ignored, producing a warning instead.

- The host networking driver only works on Linux hosts, and is not supported on Docker Desktop for Mac, Docker Desktop for Windows, or Docker EE for Windows Server.

- Command to create:
  -> docker run --name hostnginx --network host -d nginx
  We do not use the -p tag here because there is no connection to any other network. This will launch the container in the host network.

- The downside with the host network is that you can’t run multiple containers on the same host having the same port. Ports are shared by all containers on the host machine network.

None Network:

- This network is useful when there exists a container that requires complete isolation from any kind of network.

- Containers do not access the external network or communicate with other containers. You can use it when you want to disable the networking on a container.
  Use --network none in this case.

MACVLAN Network:

- Macvlan network is used to connect applications directly to the physical network. By using the macvlan network driver to assign a MAC address to each container, also allow having full TCP/Ip stack. 
  Then, the Docker daemon routes traffic to containers by their MAC addresses. 
  You can isolate your macvlan networks using different physical network interfaces. This is used in legacy applications which require MAC address.

- Making it appear as a physical device on your network.  A macvlan network is also not supported on Docker desktop for macOS.

- to create a macvlan network called macvlan-mynet:
  docker network create -d macvlan \
  --subnet=192.10.86.0/24 \
  --gateway=192.10.86.1 \
  -o parent=eth1 \
  macvlan-mynet

Note: Driver means network type.