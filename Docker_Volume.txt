To store and manage data within containers docker provide us two methods: 
1. Bind Mount
2. Docker Volumes

mounting meaning connecting or linking.

Bind Mount:
- Bind mounts have been around since the early days of Docker. Bind mounts have limited functionality compared to volumes. 
  When you use a bind mount, a file or directory on the host machine is mounted into a container. 
  The file or directory is referenced by its absolute path on the host machine.

- To use bind mounts, the file or directory does not need to exist on your Docker host already. 
  If it doesnâ€™t exist, it will be created on demand.

- To use bind mount on container you can use: --mount and -v. In general, --mount is more explicit and verbose.
  New users should use the --mount syntax. 

- -v or --volume: Consists of three fields, separated by colon characters (:). The fields must be in the correct order.
  docker run -v <source>:<target>[,<options>] ...
  the first field is the path to the file or directory on the host machine.
  second field is the path where the file or directory is mounted in the container.
  third field is optional, and is a comma-separated list of options, such as ro, z, and Z

  ro(Read Only)-> It prevents any changes or modifications to the mounted directory or filesystem. 
  You can only view or read the contents but cannot write or make any changes.
  z-> Shared Selinux Relabel
  Z-> Private Selinux Relabel

  E.g: docker run -v /host-data:/container-data my-image

- --mount: Consists of multiple key-value pairs, separated by commas and each consisting of a <key>=<value> tuple.
  The order of the keys is not important.
  Syntax: --mount <type>=<source>,<target>[,<options>]
  <type>: the type of mount like volume or bind mount.
  <source>: Specifies the source of the mount. like  host directory or file path (for bind mounts) or volume name (for Docker-managed volumes).
  <target>: Specifies the target path inside the container where the volume should be mounted. This path is relative to the container's filesystem.
  <options>: like ro,rw,z,Z
  
  E.g: --mount type=bind,source="$(pwd)"/target,target=/app nginx:latest
  source="$(pwd)"/target: specifies the path on the host system that you want to bind mount into the container. 
  // $(pwd) is a shell command that represents the current working directory, 
  and /target is the path inside the container where you want to mount the source directory.


Volumes:
- The purpose of using Docker volumes is to persist data outside the container so it can be backed up or shared.

- Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. 
  You can manage volumes using Docker CLI commands or the Docker API. 

- Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.
  Docker volumes provide a way to persist data beyond the lifecycle of containers.
- This is useful for scenarios where multiple containers need access to the same dataset. 
  Docker volumes make it easier to manage configuration files and secrets. 
  You can mount them into containers securely without exposing sensitive information in container images.

- Create Volume: docker volume create <VOLUME_NAME>
  List Volumes: docker volume ls
  Inspect volume: docker volume inspect <VOLUME_NAME>
  Remove a volume: docker volume rm <VOLUME_NAME>
  Mount Volume: docker run -v <VOLUME_NAME>:<CONTAINER_PATH> ...
  
- Example: docker run -d \
  --name devtest \
  --mount source=myvol2,target=/app \
  nginx:latest

Populate a volume using Container: 

When a container is launched and a volume is created or used, Docker checks if 
there are existing files or directories in the specified mount point within the container. 
If files or directories exist at that mount point, Docker will copy the contents into the newly created volume, 
effectively pre-populating the volume with the existing data.
This behavior is particularly useful when you want to initialize a volume with data from a container's file system.

E.g: docker run -d \
  --name=nginxtest \
  --mount source=nginx-vol,destination=/usr/share/nginx/html \
  nginx:latest

When you specify source as nginx-vol and destination as /nginx/html then Docker checks if there are existing files or
directories in the destination location if it founds that there are files then docker will copies the files into nginx-volume.
Other containers can also use the nginx-vol volume, and they will have access to the pre-populated content, 
making it easy to share data across containers.


Tmpfs Mount:
- Tmpfs mounts are typically used for temporary data storage, and they are useful when you want to store data in 
  memory for fast access without writing it to the container's filesystem. 
  However, be cautious with the size you allocate to tmpfs mounts, as it consumes memory from the host machine.
- A tmpfs mount is temporary, and only persisted in the host memory. When the container stops, the tmpfs mount is removed, 
  and files written there won't be persisted.
- This is useful to temporarily store sensitive files that you don't want to persist in either the host or the container writable layer.
- Unlike volumes and bind mounts, you can't share tmpfs mounts between containers.
- This functionality is only available if you're running Docker on Linux.
- Syntax: docker run --tmpfs <mount-point>:<mount-options> <image-name>
- <mount point>: directory inside the container where you want to create the tmpfs mount.
- <mount options>: You can specify additional options for the tmpfs mount, such as size and mode.
- E.g: docker run --tmpfs /mytmpfs:rw,size=100M alpine

